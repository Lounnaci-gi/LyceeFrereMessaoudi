const mongoose = require('mongoose');
const { Student, Class } = require('../models');
require('dotenv').config({ path: require('path').join(__dirname, '../config.env') });

// Configuration de connexion MongoDB
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log('MongoDB connect√©');
  } catch (error) {
    console.error('Erreur de connexion MongoDB:', error);
    process.exit(1);
  }
};

// Noms arabes
const nomsArabes = [
  'ŸÖÿ≠ŸÖÿØ', 'ÿ£ÿ≠ŸÖÿØ', 'ÿπŸÑŸä', 'ÿπŸÖÿ±', 'ŸäŸàÿ≥ŸÅ', 'ŸÉÿ±ŸäŸÖ', 'ÿ≥ÿπŸäÿØ', 'ÿ≠ÿ≥ŸÜ', 'ÿπÿ®ÿØ', 'ŸÖÿµÿ∑ŸÅŸâ',
  'ÿ±ÿ¥ŸäÿØ', 'ŸÜÿ®ŸäŸÑ', 'ŸÅÿ±ŸäÿØ', 'ÿ≥ŸÖŸäÿ±', 'ÿ∑ÿßÿ±ŸÇ', 'ŸàŸÑŸäÿØ', 'Ÿäÿßÿ≥ŸäŸÜ', 'ÿ≤ŸäŸÜ ÿßŸÑÿØŸäŸÜ', 'ÿ®ŸÑÿßŸÑ', 'ÿ•ÿ®ÿ±ÿßŸáŸäŸÖ',
  'ÿÆŸÑŸäŸÑ', 'ŸÖÿßŸÑŸÉ', 'ŸÜÿßÿµÿ±', 'ÿ£ÿ≥ÿßŸÖÿ©', 'ÿ±ÿ∂ÿß', 'ÿ≥ŸÅŸäÿßŸÜ', 'ÿ™ÿßÿ±ŸÇ', 'ŸäÿßŸÜÿ≥', 'ÿ≤ŸÉÿ±Ÿäÿß', 'ÿ£ŸÖŸäŸÜ',
  'ÿπÿ®ÿØ ÿßŸÑŸÑŸá', 'ÿπÿ®ÿØ ÿßŸÑÿ±ÿ≠ŸÖŸÜ', 'ÿπÿ®ÿØ ÿßŸÑÿπÿ≤Ÿäÿ≤', 'ÿπÿ®ÿØ ÿßŸÑŸÉÿ±ŸäŸÖ', 'ÿπÿ®ÿØ ÿßŸÑŸÖÿ¨ŸäÿØ', 'ÿπÿ®ÿØ ÿßŸÑŸÖÿßŸÑŸÉ', 'ÿπÿ®ÿØ ÿßŸÑŸàŸáÿßÿ®', 'ÿπÿ®ÿØ ÿßŸÑÿ±ÿ≤ÿßŸÇ'
];

// Pr√©noms arabes masculins
const prenomsMasculins = [
  'ŸÖÿ≠ŸÖÿØ', 'ÿ£ÿ≠ŸÖÿØ', 'ÿπŸÑŸä', 'ÿπŸÖÿ±', 'ŸäŸàÿ≥ŸÅ', 'ŸÉÿ±ŸäŸÖ', 'ÿ≥ÿπŸäÿØ', 'ÿ≠ÿ≥ŸÜ', 'ÿπÿ®ÿØ ÿßŸÑŸÑŸá', 'ŸÖÿµÿ∑ŸÅŸâ',
  'ÿ±ÿ¥ŸäÿØ', 'ŸÜÿ®ŸäŸÑ', 'ŸÅÿ±ŸäÿØ', 'ÿ≥ŸÖŸäÿ±', 'ÿ∑ÿßÿ±ŸÇ', 'ŸàŸÑŸäÿØ', 'Ÿäÿßÿ≥ŸäŸÜ', 'ÿ≤ŸäŸÜ ÿßŸÑÿØŸäŸÜ', 'ÿ®ŸÑÿßŸÑ', 'ÿ•ÿ®ÿ±ÿßŸáŸäŸÖ',
  'ÿÆŸÑŸäŸÑ', 'ŸÖÿßŸÑŸÉ', 'ŸÜÿßÿµÿ±', 'ÿ£ÿ≥ÿßŸÖÿ©', 'ÿ±ÿ∂ÿß', 'ÿ≥ŸÅŸäÿßŸÜ', 'ÿ™ÿßÿ±ŸÇ', 'ŸäÿßŸÜÿ≥', 'ÿ≤ŸÉÿ±Ÿäÿß', 'ÿ£ŸÖŸäŸÜ',
  'ÿπÿ®ÿØ ÿßŸÑÿ±ÿ≠ŸÖŸÜ', 'ÿπÿ®ÿØ ÿßŸÑÿπÿ≤Ÿäÿ≤', 'ÿπÿ®ÿØ ÿßŸÑŸÉÿ±ŸäŸÖ', 'ÿπÿ®ÿØ ÿßŸÑŸÖÿ¨ŸäÿØ', 'ÿπÿ®ÿØ ÿßŸÑŸÖÿßŸÑŸÉ', 'ÿπÿ®ÿØ ÿßŸÑŸàŸáÿßÿ®', 'ÿπÿ®ÿØ ÿßŸÑÿ±ÿ≤ÿßŸÇ', 'ÿπÿ®ÿØ ÿßŸÑÿ≠ŸÖŸäÿØ'
];

// Pr√©noms arabes f√©minins
const prenomsFeminins = [
  'ŸÅÿßÿ∑ŸÖÿ©', 'ÿπÿßÿ¶ÿ¥ÿ©', 'ÿÆÿØŸäÿ¨ÿ©', 'ÿ≤ŸäŸÜÿ®', 'ŸÜŸàÿ±', 'ÿ≥ŸÑŸÖŸâ', 'Ÿäÿßÿ≥ŸÖŸäŸÜ', 'ŸÑŸäŸÜÿß', 'ÿ≥ÿßÿ±ÿ©', 'ŸÜÿßÿØŸäÿ©',
  'ÿ≥ŸÖŸäÿ±ÿ©', 'ÿ±ÿßŸÜŸäÿß', 'ÿ¨ŸÖŸäŸÑÿ©', 'ŸÖŸÑŸÉÿ©', 'ÿ´ÿ±Ÿäÿß', 'ŸÑŸäŸÑŸâ', 'ŸÜÿπŸäŸÖÿ©', 'ŸáŸàÿØÿß', 'ŸÉÿ±ŸäŸÖÿ©', 'ÿ≤ŸÉŸäÿ©',
  'ÿ£ŸÖŸäŸÜÿ©', 'ÿ®ÿ¥ÿ±Ÿâ', 'ÿ¥Ÿáÿ±ÿ≤ÿßÿØ', 'ÿØŸÜŸäÿß', 'ÿ•ŸäŸÅÿß', 'ŸÅÿßÿ∂ŸÑÿ©', 'ÿ∫ÿßŸÜŸäÿ©', 'Ÿáÿ®ÿ©', 'ÿ•ŸäŸÖÿßŸÜ', 'ÿ¨ŸäŸáÿßŸÜ',
  'ŸÖÿ±ŸäŸÖ', 'ÿ≤Ÿáÿ±ÿ©', 'ÿ≠Ÿäÿßÿ©', 'ÿ≥ÿπÿßÿØ', 'ŸÅÿ±ŸäÿØÿ©', 'ÿ±ÿ≠ŸÖÿ©', 'ÿµŸÅŸäÿ©', 'ÿπÿ≤Ÿäÿ≤ÿ©', 'ÿ≠ŸÉŸäŸÖÿ©', 'ÿ±ÿßÿ∂Ÿäÿ©'
];

// Fonction pour g√©n√©rer une date de naissance al√©atoire entre 2005 et 2009
const generateDateOfBirth = () => {
  const year = Math.floor(Math.random() * 5) + 2005; // 2005-2009
  const month = Math.floor(Math.random() * 12) + 1;
  const day = Math.floor(Math.random() * 28) + 1; // Pour √©viter les probl√®mes de jours inexistants
  return new Date(year, month - 1, day);
};

// Fonction pour translitt√©rer l'arabe vers l'anglais pour l'email
const transliterateArabic = (text) => {
  const arabicToEnglish = {
    'ÿ£': 'a', 'ÿ•': 'i', 'ÿ¢': 'aa', 'ÿß': 'a', 'ÿ®': 'b', 'ÿ™': 't', 'ÿ´': 'th', 'ÿ¨': 'j',
    'ÿ≠': 'h', 'ÿÆ': 'kh', 'ÿØ': 'd', 'ÿ∞': 'dh', 'ÿ±': 'r', 'ÿ≤': 'z', 'ÿ≥': 's', 'ÿ¥': 'sh',
    'ÿµ': 's', 'ÿ∂': 'd', 'ÿ∑': 't', 'ÿ∏': 'z', 'ÿπ': 'a', 'ÿ∫': 'gh', 'ŸÅ': 'f', 'ŸÇ': 'q',
    'ŸÉ': 'k', 'ŸÑ': 'l', 'ŸÖ': 'm', 'ŸÜ': 'n', 'Ÿá': 'h', 'Ÿà': 'w', 'Ÿä': 'y', 'Ÿâ': 'a',
    'ÿ©': 'a', 'ÿ°': 'a', 'ÿ§': 'w', 'ÿ¶': 'y', ' ': ''
  };
  
  return text.split('').map(char => arabicToEnglish[char] || char).join('');
};

// Fonction pour g√©n√©rer un email bas√© sur le nom et pr√©nom
const generateEmail = (prenom, nom, index) => {
  const prenomTranslit = transliterateArabic(prenom);
  const nomTranslit = transliterateArabic(nom);
  const baseEmail = `${prenomTranslit}.${nomTranslit}`;
  const email = `${baseEmail}${index + 1}@lycee.edu.dz`;
  return email;
};

// Fonction pour g√©n√©rer un num√©ro de t√©l√©phone alg√©rien
const generatePhone = () => {
  const prefixes = ['055', '056', '066', '067', '077', '078'];
  const prefix = prefixes[Math.floor(Math.random() * prefixes.length)];
  const number = Math.floor(Math.random() * 10000000).toString().padStart(7, '0');
  return prefix + number;
};

// Fonction pour g√©n√©rer un studentId unique
const generateStudentId = (index) => {
  const year = new Date().getFullYear();
  const studentNumber = (index + 1).toString().padStart(4, '0');
  return `${year}${studentNumber}`;
};

const insertStudents = async () => {
  try {
    await connectDB();
    
    // R√©cup√©rer toutes les classes disponibles
    const classes = await Class.find({ isActive: true }).populate('specialty', 'name');
    console.log(`Trouv√© ${classes.length} classes disponibles`);
    
    if (classes.length === 0) {
      console.log('‚ùå Aucune classe trouv√©e. Veuillez d\'abord cr√©er des classes.');
      return;
    }
    
    // V√©rifier s'il y a d√©j√† des √©l√®ves
    const existingStudents = await Student.find();
    if (existingStudents.length > 0) {
      console.log(`Suppression de ${existingStudents.length} √©l√®ves existants...`);
      await Student.deleteMany({});
    }
    
    const students = [];
    
    // G√©n√©rer 40 √©l√®ves
    for (let i = 0; i < 40; i++) {
      const isMale = Math.random() < 0.5; // 50% de chance d'√™tre masculin
      const prenom = isMale 
        ? prenomsMasculins[Math.floor(Math.random() * prenomsMasculins.length)]
        : prenomsFeminins[Math.floor(Math.random() * prenomsFeminins.length)];
      
      const nom = nomsArabes[Math.floor(Math.random() * nomsArabes.length)];
      const dateOfBirth = generateDateOfBirth();
      const gender = isMale ? 'male' : 'female';
      const email = generateEmail(prenom, nom, i);
      const phone = generatePhone();
      
      // S√©lectionner une classe al√©atoire
      const randomClass = classes[Math.floor(Math.random() * classes.length)];
      
      // G√©n√©rer une adresse al√©atoire
      const wilayas = ['Alger', 'Oran', 'Constantine', 'Annaba', 'Blida', 'S√©tif', 'Batna', 'Djelfa', 'Sidi Bel Abb√®s', 'Biskra'];
      const wilaya = wilayas[Math.floor(Math.random() * wilayas.length)];
      
      const student = {
        studentId: generateStudentId(i),
        firstName: prenom,
        lastName: nom,
        dateOfBirth: dateOfBirth,
        gender: gender,
        email: email,
        phone: phone,
        class: randomClass._id,
        address: {
          street: `Rue ${Math.floor(Math.random() * 100) + 1}`,
          city: wilaya,
          postalCode: Math.floor(Math.random() * 90000) + 10000,
          country: 'Alg√©rie'
        },
        isActive: true
      };
      
      students.push(student);
    }
    
    // Ins√©rer tous les √©l√®ves
    console.log('Insertion des 40 √©l√®ves...');
    const insertedStudents = await Student.insertMany(students);
    
    console.log(`‚úÖ ${insertedStudents.length} √©l√®ves ins√©r√©s avec succ√®s !`);
    
    // Afficher un r√©sum√© par genre
    const maleCount = insertedStudents.filter(s => s.gender === 'male').length;
    const femaleCount = insertedStudents.filter(s => s.gender === 'female').length;
    
    console.log('\nüìä R√©sum√© des √©l√®ves cr√©√©s:');
    console.log(`  üë® Masculins: ${maleCount}`);
    console.log(`  üë© F√©minins: ${femaleCount}`);
    
    // Afficher un r√©sum√© par classe
    const classSummary = {};
    insertedStudents.forEach(student => {
      const classId = student.class.toString();
      if (!classSummary[classId]) {
        classSummary[classId] = { count: 0, className: '' };
      }
      classSummary[classId].count++;
    });
    
    // R√©cup√©rer les noms des classes
    for (const classId in classSummary) {
      const classInfo = classes.find(c => c._id.toString() === classId);
      if (classInfo) {
        classSummary[classId].className = classInfo.name;
      }
    }
    
    console.log('\nüéØ R√©partition par classe:');
    Object.values(classSummary).forEach(info => {
      console.log(`  ${info.className}: ${info.count} √©l√®ves`);
    });
    
    // Afficher quelques exemples
    console.log('\nüë• Exemples d\'√©l√®ves cr√©√©s:');
    insertedStudents.slice(0, 10).forEach((student, index) => {
      const classInfo = classes.find(c => c._id.toString() === student.class.toString());
      const age = new Date().getFullYear() - student.dateOfBirth.getFullYear();
      console.log(`  ${index + 1}. ${student.firstName} ${student.lastName} (${student.gender === 'male' ? 'M' : 'F'}, ${age} ans) - ${classInfo ? classInfo.name : 'Classe inconnue'}`);
    });
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'insertion des √©l√®ves:', error);
  } finally {
    await mongoose.connection.close();
    console.log('\nüîå Connexion MongoDB ferm√©e');
    process.exit(0);
  }
};

// Ex√©cuter le script
insertStudents();
