const mongoose = require('mongoose');
const { Class, Specialty } = require('../models');
require('dotenv').config({ path: require('path').join(__dirname, '../config.env') });

// Configuration de connexion MongoDB
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log('MongoDB connect√©');
  } catch (error) {
    console.error('Erreur de connexion MongoDB:', error);
    process.exit(1);
  }
};

// Donn√©es des classes √† ins√©rer
const classesData = [
  // 1√®re ann√©e
  { name: '1√®re A', level: '1√®re ann√©e', academicYear: '2024-2025', capacity: 30 },
  { name: '1√®re B', level: '1√®re ann√©e', academicYear: '2024-2025', capacity: 30 },
  { name: '1√®re C', level: '1√®re ann√©e', academicYear: '2024-2025', capacity: 30 },
  { name: '1√®re D', level: '1√®re ann√©e', academicYear: '2024-2025', capacity: 30 },
  { name: '1√®re E', level: '1√®re ann√©e', academicYear: '2024-2025', capacity: 30 },
  
  // 2√®me ann√©e
  { name: '2√®me A', level: '2√®me ann√©e', academicYear: '2024-2025', capacity: 30 },
  { name: '2√®me B', level: '2√®me ann√©e', academicYear: '2024-2025', capacity: 30 },
  { name: '2√®me C', level: '2√®me ann√©e', academicYear: '2024-2025', capacity: 30 },
  { name: '2√®me D', level: '2√®me ann√©e', academicYear: '2024-2025', capacity: 30 },
  { name: '2√®me E', level: '2√®me ann√©e', academicYear: '2024-2025', capacity: 30 },
  
  // 3√®me ann√©e
  { name: '3√®me A', level: '3√®me ann√©e', academicYear: '2024-2025', capacity: 30 },
  { name: '3√®me B', level: '3√®me ann√©e', academicYear: '2024-2025', capacity: 30 },
  { name: '3√®me C', level: '3√®me ann√©e', academicYear: '2024-2025', capacity: 30 },
  { name: '3√®me D', level: '3√®me ann√©e', academicYear: '2024-2025', capacity: 30 },
  { name: '3√®me E', level: '3√®me ann√©e', academicYear: '2024-2025', capacity: 30 }
];

const insertClasses = async () => {
  try {
    await connectDB();
    
    // R√©cup√©rer les sp√©cialit√©s existantes
    const specialties = await Specialty.find({ isActive: true });
    console.log(`Trouv√© ${specialties.length} sp√©cialit√©s`);
    
    if (specialties.length === 0) {
      console.log('Aucune sp√©cialit√© trouv√©e. Cr√©ation de sp√©cialit√©s par d√©faut...');
      
      const defaultSpecialties = [
        { name: 'Sciences', code: 'SCI', description: 'Sp√©cialit√© Sciences' },
        { name: 'Lettres', code: 'LET', description: 'Sp√©cialit√© Lettres' },
        { name: 'Math√©matiques', code: 'MATH', description: 'Sp√©cialit√© Math√©matiques' },
        { name: 'Langues', code: 'LANG', description: 'Sp√©cialit√© Langues' },
        { name: 'Histoire-G√©ographie', code: 'HG', description: 'Sp√©cialit√© Histoire-G√©ographie' }
      ];
      
      for (const specialty of defaultSpecialties) {
        const newSpecialty = new Specialty(specialty);
        await newSpecialty.save();
        console.log(`Sp√©cialit√© cr√©√©e: ${specialty.name}`);
      }
      
      // R√©cup√©rer √† nouveau les sp√©cialit√©s
      const updatedSpecialties = await Specialty.find({ isActive: true });
      specialties.push(...updatedSpecialties);
    }
    
    // Assigner des sp√©cialit√©s aux classes
    const classesWithSpecialties = classesData.map((classData, index) => {
      const specialtyIndex = index % specialties.length;
      return {
        ...classData,
        specialty: specialties[specialtyIndex]._id
      };
    });
    
    // V√©rifier si les classes existent d√©j√†
    const existingClasses = await Class.find({ academicYear: '2024-2025' });
    if (existingClasses.length > 0) {
      console.log(`Suppression de ${existingClasses.length} classes existantes...`);
      await Class.deleteMany({ academicYear: '2024-2025' });
    }
    
    // Ins√©rer les nouvelles classes
    console.log('Insertion des 15 classes...');
    const insertedClasses = await Class.insertMany(classesWithSpecialties);
    
    console.log(`‚úÖ ${insertedClasses.length} classes ins√©r√©es avec succ√®s !`);
    
    // Afficher un r√©sum√©
    const summary = insertedClasses.reduce((acc, cls) => {
      acc[cls.level] = (acc[cls.level] || 0) + 1;
      return acc;
    }, {});
    
    console.log('\nüìä R√©sum√© des classes cr√©√©es:');
    Object.entries(summary).forEach(([level, count]) => {
      console.log(`  ${level}: ${count} classes`);
    });
    
    console.log('\nüéØ Classes cr√©√©es:');
    insertedClasses.forEach(cls => {
      const specialty = specialties.find(s => s._id.toString() === cls.specialty.toString());
      console.log(`  - ${cls.name} (${cls.level}) - ${specialty ? specialty.name : 'Sans sp√©cialit√©'}`);
    });
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'insertion des classes:', error);
  } finally {
    await mongoose.connection.close();
    console.log('\nüîå Connexion MongoDB ferm√©e');
    process.exit(0);
  }
};

// Ex√©cuter le script
insertClasses();
