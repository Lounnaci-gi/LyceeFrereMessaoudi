const path = require('path');
require('dotenv').config({ path: path.join(__dirname, 'config.env') });
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const { connectDB } = require('./config/database');

async function fixAdminUser() {
  try {
    console.log('üîß Correction de l\'utilisateur admin...\n');
    
    // Connexion √† MongoDB (Atlas ou URI fourni) via la m√™me logique que l'application
    await connectDB();
    
    const { Role, User } = require('./models');
    
    // 1. V√©rifier les r√¥les
    console.log('\n1Ô∏è‚É£ V√©rification des r√¥les...');
    const roles = await Role.find();
    console.log('üìä R√¥les disponibles:', roles.map(r => ({ id: r._id, name: r.name })));
    
    // 2. Trouver le r√¥le admin
    const adminRole = await Role.findOne({ name: 'admin' });
    if (!adminRole) {
      throw new Error('R√¥le admin non trouv√©');
    }
    console.log('‚úÖ R√¥le admin trouv√©:', adminRole._id);
    
    // 3. V√©rifier l'utilisateur admin
    console.log('\n2Ô∏è‚É£ V√©rification de l\'utilisateur admin...');
    const adminUser = await User.findOne({ username: 'admin' });
    if (!adminUser) {
      throw new Error('Utilisateur admin non trouv√©');
    }
    console.log('‚úÖ Utilisateur admin trouv√©:', adminUser.username);
    console.log('üìä R√¥le actuel:', adminUser.role || 'Aucun r√¥le');
    
    // 4. Corriger donn√©es requises et r√©f√©rence du r√¥le
    let changed = false;
    if (!adminUser.role || adminUser.role.toString() !== adminRole._id.toString()) {
      console.log('üîÑ Attribution du r√¥le admin...');
      adminUser.role = adminRole._id;
      changed = true;
    }
    if (!adminUser.firstName) {
      adminUser.firstName = process.env.ADMIN_NAME || 'Administrateur';
      changed = true;
    }
    if (!adminUser.lastName) {
      adminUser.lastName = 'Syst√®me';
      changed = true;
    }
    if (!adminUser.email) {
      adminUser.email = process.env.ADMIN_EMAIL || 'admin@example.com';
      changed = true;
    }
    if (!adminUser.password) {
      adminUser.password = await bcrypt.hash(process.env.ADMIN_PASSWORD || 'admin123', 12);
      changed = true;
    }
    if (changed) {
      await adminUser.save();
      console.log('‚úÖ Admin mis √† jour');
    } else {
      console.log('‚úÖ Aucune mise √† jour n√©cessaire');
    }
    
    // 5. V√©rifier la correction
    console.log('\n3Ô∏è‚É£ V√©rification de la correction...');
    const fixedAdmin = await User.findOne({ username: 'admin' }).populate('role');
    if (fixedAdmin && fixedAdmin.role) {
      console.log('‚úÖ Admin corrig√©:', {
        username: fixedAdmin.username,
        email: fixedAdmin.email,
        role: fixedAdmin.role.name,
        permissions: fixedAdmin.role.permissions
      });
    } else {
      console.log('‚ùå Probl√®me persistant');
    }
    
    console.log('\nüéØ Correction termin√©e');
    
  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
  } finally {
    await mongoose.connection.close();
    console.log('üîå Connexion MongoDB ferm√©e');
  }
}

fixAdminUser(); 